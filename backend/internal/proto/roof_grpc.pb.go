// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: roof.proto

package roof

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoofServiceProceduresClient is the client API for RoofServiceProcedures service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoofServiceProceduresClient interface {
	Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error)
	PerformAnalysis(ctx context.Context, in *PerformAnalysisRequest, opts ...grpc.CallOption) (*PerformAnalysisResponse, error)
	RetrieveAnalysis(ctx context.Context, in *RetrieveAnalysisRequest, opts ...grpc.CallOption) (*RetrieveAnalysisResponse, error)
}

type roofServiceProceduresClient struct {
	cc grpc.ClientConnInterface
}

func NewRoofServiceProceduresClient(cc grpc.ClientConnInterface) RoofServiceProceduresClient {
	return &roofServiceProceduresClient{cc}
}

func (c *roofServiceProceduresClient) Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error) {
	out := new(PingMessage)
	err := c.cc.Invoke(ctx, "/roof.RoofServiceProcedures/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roofServiceProceduresClient) PerformAnalysis(ctx context.Context, in *PerformAnalysisRequest, opts ...grpc.CallOption) (*PerformAnalysisResponse, error) {
	out := new(PerformAnalysisResponse)
	err := c.cc.Invoke(ctx, "/roof.RoofServiceProcedures/PerformAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roofServiceProceduresClient) RetrieveAnalysis(ctx context.Context, in *RetrieveAnalysisRequest, opts ...grpc.CallOption) (*RetrieveAnalysisResponse, error) {
	out := new(RetrieveAnalysisResponse)
	err := c.cc.Invoke(ctx, "/roof.RoofServiceProcedures/RetrieveAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoofServiceProceduresServer is the server API for RoofServiceProcedures service.
// All implementations must embed UnimplementedRoofServiceProceduresServer
// for forward compatibility
type RoofServiceProceduresServer interface {
	Ping(context.Context, *PingMessage) (*PingMessage, error)
	PerformAnalysis(context.Context, *PerformAnalysisRequest) (*PerformAnalysisResponse, error)
	RetrieveAnalysis(context.Context, *RetrieveAnalysisRequest) (*RetrieveAnalysisResponse, error)
	mustEmbedUnimplementedRoofServiceProceduresServer()
}

// UnimplementedRoofServiceProceduresServer must be embedded to have forward compatible implementations.
type UnimplementedRoofServiceProceduresServer struct {
}

func (UnimplementedRoofServiceProceduresServer) Ping(context.Context, *PingMessage) (*PingMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedRoofServiceProceduresServer) PerformAnalysis(context.Context, *PerformAnalysisRequest) (*PerformAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformAnalysis not implemented")
}
func (UnimplementedRoofServiceProceduresServer) RetrieveAnalysis(context.Context, *RetrieveAnalysisRequest) (*RetrieveAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveAnalysis not implemented")
}
func (UnimplementedRoofServiceProceduresServer) mustEmbedUnimplementedRoofServiceProceduresServer() {}

// UnsafeRoofServiceProceduresServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoofServiceProceduresServer will
// result in compilation errors.
type UnsafeRoofServiceProceduresServer interface {
	mustEmbedUnimplementedRoofServiceProceduresServer()
}

func RegisterRoofServiceProceduresServer(s grpc.ServiceRegistrar, srv RoofServiceProceduresServer) {
	s.RegisterService(&RoofServiceProcedures_ServiceDesc, srv)
}

func _RoofServiceProcedures_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoofServiceProceduresServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roof.RoofServiceProcedures/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoofServiceProceduresServer).Ping(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoofServiceProcedures_PerformAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerformAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoofServiceProceduresServer).PerformAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roof.RoofServiceProcedures/PerformAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoofServiceProceduresServer).PerformAnalysis(ctx, req.(*PerformAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoofServiceProcedures_RetrieveAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoofServiceProceduresServer).RetrieveAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roof.RoofServiceProcedures/RetrieveAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoofServiceProceduresServer).RetrieveAnalysis(ctx, req.(*RetrieveAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoofServiceProcedures_ServiceDesc is the grpc.ServiceDesc for RoofServiceProcedures service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoofServiceProcedures_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "roof.RoofServiceProcedures",
	HandlerType: (*RoofServiceProceduresServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _RoofServiceProcedures_Ping_Handler,
		},
		{
			MethodName: "PerformAnalysis",
			Handler:    _RoofServiceProcedures_PerformAnalysis_Handler,
		},
		{
			MethodName: "RetrieveAnalysis",
			Handler:    _RoofServiceProcedures_RetrieveAnalysis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "roof.proto",
}
